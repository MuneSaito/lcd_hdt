Git study memo

フォルダ内容の追加登録
git add .

最初のコミット
git commit

ファイルの変更作業

現在の変更状況を確認
git status
  更新ファイルがあることを指摘

変更内容（差分を確認）
git diff

git add .(追加・登録ファイル)

ステージの差分を表示
git diff --staged

コミット
git commit

変更履歴の確認
git log
各1行のみ表示
git log --oneline
変更差分表示
git log -p XX.XX
表示数制限
git log -n <コミット数>

ファイルの削除
git rm <ファイル名>
git rm -r <ディレクトリ名>
ファイルを残したい（ワークツリーに残しリポジトリから削除）
git rm --chashed <ファイル名>

ファイルの移動（名称変更）
git mv <旧ファイル名> <新ファイル名>
　これは以下と同等
　mv old
  git rm old
  git add new

リモートリポジトリの設定 
git remote add origin https://github.com/MuneSaito/lcd_hdt.git

エイリアスの設定
 git config --global alias.ci commit
 git config --global alias.st status
 git config --global alias.br branch
 git config --global alias.co checkout

リモートリポジトリへの反映
git push -u origin master

ファイル変更（ワークツリー上）の取り消し
git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>
git checkout -- .

ファイル変更（ステージ）取り消し
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>
git reset HEAD .

ステージの変更のみが取り消されるのでワークツリーはそのまま

リモートリポジトリ
git remote
git remote -v


git fetch
git marge

いっぺんに
git pull

使い分け
プルの注意点

リモートリポジトリのリネーム
git remote rename old new

リモートリポジトリの削除
git remote rm repo

ブランチ
状況：並行して複数機能の開発
ほかの変更の影響を受けない

ブランチの作成
git branch ブランチ名
確認
git log --oneline --decorate

ブランチ切替
git checkout ブランチ名

マージ
git merge　origin

マージの種類
Fast Foward（ブランチ分岐していない時、多で変更された内容を取り込む）

Auto Merge（ブランチ分岐している場合の基本的なマージ）

Conflict(コンフリクト発生時、ブランチ間で同一ファイルを更新している場合)

ブランチを変更。削除する
git branch -m newブランチ名
 作業中のブランチをnewブランチ名に変更

bit branch -d ブランチ名
 ブランチを削除
強制削除
bit branch -D ブランチ名
 
masterブランチをリリース用
開発はトピックブランチを作成して進める

リモートリポジトリのブランチ状態も表示
git branch -a

開発手順の流れ
プルリクエスト
　masterにmergeするとき、チームへのプル要求　他のメンバーへコードレビューを依頼する
　修正依頼に対応しapproveを得られたら

GitHub Flow
masterを基本に開発はブランチで行い、masterへのmerge時にプルリクエストでレビューを受けてからmasterにpushする
デプロイ

リベース
変更を統合する
ブランチにmasterの変更を取り込むのにmergeの代わりにrebaseを使う
その時にコミットの親コミットがmasterのコミットに切り替わる
そのあとのmasterのコミットはFastFowardでマージされる
履歴を整える

リベースでしてはいけないこと
プッシュしたコミットをリベースするのはNG
git push -fは絶対NG

rebaseとmergeの使い分け

マージ
コンフリクトの解決が比較的簡単
マージ込み意図が他区佐鳴と履歴が複雑化する

リベース
履歴をきれいに保つ
コンフリクトの解決が少し面倒 

プッシュしていないローカルの変更にはリベースを使う
プッシュした後はマージを使う
コンフリクトしそうならマージを使う

プルにはマージ型、リベース型がある
マージ型　通常のプル　マージコミットの履歴が残る
プル型　GitHubの内容を取得したいだけのとき　マージ履歴はいらない


タグ　リリースポイントに使用する
git tag
注釈付き　-a　<-m "[注釈]">
軽量版　タグ名のみ、情報なし

git tag　でタグ一覧表示
git show [タグ名]
で詳細情報表示

pushでリモートにタグを送信
git push [リモート名]　[タグ名]
git push origin --tag　一斉送信　ローカルにあってリモートにないタグを一斉送信する

作業を一時避難
git stash
git stash save
git stash list　避難作業確認
git stash apply 復元
git stash apply --index sute-jimo 
fukugenn 
tokuteino 
sagyou 
を復元
git stash apply [スタッシュ名]
git stash apply stash@{1}
避難作業を削除
git stash drop 



